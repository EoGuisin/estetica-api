// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------
// Core Models
// ----------------------------------------

enum ClinicStatus {
  PENDING_PAYMENT
  ACTIVE
  INACTIVE
  CANCELED
}

enum RoleType {
  ADMIN
  PROFESSIONAL
  SECRETARY
  FINANCIAL
}

model Clinic {
  id        String       @id @default(uuid())
  name      String
  taxId     String       @unique // Formerly CNPJ
  status    ClinicStatus @default(PENDING_PAYMENT)
  addressId String?

  address            Address?            @relation(fields: [addressId], references: [id])
  patients           Patient[]
  users              User[]
  treatmentPlans     TreatmentPlan[]
  anamnesisTemplates AnamnesisTemplate[]
  patientAssessments PatientAssessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clinics")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model User {
  id                  String               @id @default(uuid())
  isProfessional      Boolean              @default(false)
  fullName            String
  cpf                 String?              @unique
  email               String               @unique
  phone               String?
  passwordHash        String
  electronicSignature String?
  scheduleStartHour   String? // e.g., "08:00"
  scheduleEndHour     String? // e.g., "18:00"
  appointmentDuration Int? // In minutes
  notes               String?
  color               String?              @default("#ffffff") // Cor para o calend√°rio
  clinicId            String
  roleId              String
  passwordResetTokens PasswordResetToken[]

  clinic       Clinic              @relation(fields: [clinicId], references: [id])
  role         Role                @relation(fields: [roleId], references: [id])
  specialties  Specialty[]         @relation("ProfessionalSpecialties")
  appointments Appointment[]
  sales        TreatmentPlan[]
  assessments  PatientAssessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Patient {
  id              String         @id @default(uuid())
  imageUrl        String?
  cpf             String         @unique
  name            String
  socialName      String?
  birthDate       DateTime
  identityCard    String?
  gender          String?
  ethnicity       String?
  motherName      String?
  occupation      String?
  notes           String?
  clinicId        String
  trafficSourceId String?
  trafficSource   TrafficSource? @relation(fields: [trafficSourceId], references: [id])

  // Guardian Info
  guardianName      String?
  guardianBirthDate DateTime?

  clinic            Clinic              @relation(fields: [clinicId], references: [id])
  address           Address?            @relation(fields: [addressId], references: [id])
  addressId         String?
  phones            Phone[]
  treatmentPlans    TreatmentPlan[]
  appointments      Appointment[]
  assessments       PatientAssessment[]
  attachments       Attachment[]
  beforeAfterImages BeforeAfterImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model TrafficSource {
  id   String @id @default(uuid())
  name String @unique

  patients Patient[]

  @@map("traffic_sources")
}

// ----------------------------------------
// Relation and Catalog Models
// ----------------------------------------

model Address {
  id           String  @id @default(uuid())
  zipCode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String?

  patients Patient[]
  clinics  Clinic[]

  @@map("addresses")
}

model Phone {
  id         String  @id @default(uuid())
  number     String
  isWhatsapp Boolean @default(false)
  patientId  String

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("phones")
}

model Role {
  id           String   @id @default(uuid())
  name         String   @unique
  type         RoleType @default(ADMIN)
  description  String?
  isSuperAdmin Boolean  @default(false)

  users User[]

  @@map("roles")
}

model Specialty {
  id   String @id @default(uuid())
  name String @unique

  procedures    Procedure[]
  professionals User[]      @relation("ProfessionalSpecialties")

  @@map("specialties")
}

model Procedure {
  id            String  @id @default(uuid())
  name          String
  standardPrice Decimal @db.Decimal(10, 2)
  description   String?
  specialtyId   String

  specialty      Specialty                @relation(fields: [specialtyId], references: [id])
  treatmentPlans TreatmentPlanProcedure[]

  @@map("procedures")
}

model TreatmentPlan {
  id                 String   @id @default(uuid())
  patientId          String
  clinicId           String
  sellerId           String
  subtotal           Decimal  @db.Decimal(10, 2)
  discountAmount     Decimal? @db.Decimal(10, 2)
  discountPercentage Decimal? @db.Decimal(5, 2)
  surcharge          Decimal? @db.Decimal(10, 2)
  total              Decimal  @db.Decimal(10, 2)

  patient           Patient                  @relation(fields: [patientId], references: [id])
  clinic            Clinic                   @relation(fields: [clinicId], references: [id])
  seller            User                     @relation(fields: [sellerId], references: [id])
  procedures        TreatmentPlanProcedure[]
  appointments      Appointment[]
  beforeAfterImages BeforeAfterImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("treatment_plans")
}

model TreatmentPlanProcedure {
  id                 String  @id @default(uuid())
  treatmentPlanId    String
  procedureId        String
  contractedSessions Int
  completedSessions  Int     @default(0)
  unitPrice          Decimal @db.Decimal(10, 2)
  followUps          Int     @default(0)

  treatmentPlan TreatmentPlan @relation(fields: [treatmentPlanId], references: [id], onDelete: Cascade)
  procedure     Procedure     @relation(fields: [procedureId], references: [id])

  @@map("treatment_plan_procedures")
}

model Appointment {
  id        String   @id @default(uuid())
  date      DateTime
  startTime String // "14:30"
  endTime   String // "15:30"
  notes     String?
  status    String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, CANCELED, COMPLETED

  patientId         String
  professionalId    String
  appointmentTypeId String
  treatmentPlanId   String? // Optional, if it's a session from a plan

  patient         Patient            @relation(fields: [patientId], references: [id])
  professional    User               @relation(fields: [professionalId], references: [id])
  appointmentType AppointmentType    @relation(fields: [appointmentTypeId], references: [id])
  treatmentPlan   TreatmentPlan?     @relation(fields: [treatmentPlanId], references: [id])
  assessment      PatientAssessment?
  clinicalRecord  ClinicalRecord?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model AppointmentType {
  id   String @id @default(uuid())
  name String @unique // Consultation, Follow-up, Procedure

  appointments Appointment[]

  @@map("appointment_types")
}

enum QuestionType {
  YES_NO
  SHORT_TEXT
  LONG_TEXT
  SINGLE_SELECT
  MULTIPLE_SELECT
  SCALE // 1-10 scale
  DATE
}

model AnamnesisTemplate {
  id          String  @id @default(uuid())
  name        String
  description String?
  clinicId    String
  isActive    Boolean @default(true)

  clinic      Clinic              @relation(fields: [clinicId], references: [id])
  sections    AnamnesisSection[]
  assessments PatientAssessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("anamnesis_templates")
}

model AnamnesisSection {
  id         String @id @default(uuid())
  templateId String
  title      String
  order      Int

  template  AnamnesisTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  questions AnamnesisQuestion[]

  @@map("anamnesis_sections")
}

model AnamnesisQuestion {
  id               String       @id @default(uuid())
  sectionId        String
  question         String
  description      String?
  type             QuestionType
  isRequired       Boolean      @default(false)
  order            Int
  options          Json? // For select/checkbox options
  parentQuestionId String? // For sub-questions
  showCondition    Json? // Conditions to show this question

  section        AnamnesisSection     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  parentQuestion AnamnesisQuestion?   @relation("SubQuestions", fields: [parentQuestionId], references: [id])
  subQuestions   AnamnesisQuestion[]  @relation("SubQuestions")
  responses      AssessmentResponse[]

  @@map("anamnesis_questions")
}

model PatientAssessment {
  id             String  @id @default(uuid())
  patientId      String
  appointmentId  String? @unique
  templateId     String
  professionalId String
  clinicId       String
  status         String  @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED

  patient      Patient              @relation(fields: [patientId], references: [id])
  appointment  Appointment?         @relation(fields: [appointmentId], references: [id])
  template     AnamnesisTemplate    @relation(fields: [templateId], references: [id])
  professional User                 @relation(fields: [professionalId], references: [id])
  clinic       Clinic               @relation(fields: [clinicId], references: [id])
  responses    AssessmentResponse[]

  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([patientId])
  @@index([appointmentId])
  @@map("patient_assessments")
}

model AssessmentResponse {
  id           String @id @default(uuid())
  assessmentId String
  questionId   String
  value        Json // Flexible storage for different response types

  assessment PatientAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question   AnamnesisQuestion @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([assessmentId, questionId])
  @@map("assessment_responses")
}

model ClinicalRecord {
  id            String  @id @default(uuid())
  appointmentId String  @unique
  diagnosis     String? @db.Text

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clinical_records")
}

model Attachment {
  id          String  @id @default(uuid())
  patientId   String
  fileName    String
  description String?
  filePath    String // Path in Supabase storage
  fileType    String // e.g., 'image/png', 'application/pdf'
  size        Int // in bytes

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("attachments")
}

model BeforeAfterImage {
  id              String  @id @default(uuid())
  patientId       String
  treatmentPlanId String? // Link to a specific treatment
  description     String?
  beforeImagePath String
  afterImagePath  String?

  patient       Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  treatmentPlan TreatmentPlan? @relation(fields: [treatmentPlanId], references: [id])

  createdAt DateTime @default(now())

  @@map("before_after_images")
}
